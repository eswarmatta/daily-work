Two Sum IV - Input is a BST
code:
class Solution {
    boolean flag=false;
    HashMap<Integer,Integer> map = new HashMap<>();
    public boolean findTarget(TreeNode root, int k) {
        inorder(root,k);
        return flag;
    }
    void inorder(TreeNode root,int k){
        if(root==null) return;
        inorder(root.left,k);
        if(map.containsKey(k-root.val)){
            flag=true;
            return;
        }
        else{
            map.put(root.val,1);
        }
        inorder(root.right,k);
    }
}
Minimum Absolute Difference in BST
code:
class Solution {
    List<Integer> list = new ArrayList<>();
    int min=Integer.MAX_VALUE;
    public int getMinimumDifference(TreeNode root) {
        inorder(root);
        for(int i=0;i<list.size()-1;i++){
            min=Math.min(Math.abs(list.get(i)-list.get(i+1)),min);
        }
        return min;
    }

    void inorder(TreeNode root){
        if(root==null) return;
        inorder(root.left);
        list.add(root.val);
        inorder(root.right);
        return;
    }
}
Find Mode in Binary Search Tree
code:
class Solution {
     Map<Integer, Integer> map;
    public int[] findMode(TreeNode root) {
        map = new HashMap<>();
        searchInBST(root);
        int maxFreq = -1;
        List<Integer> list = new ArrayList<>();
        for (int key : map.keySet()) {
            int freq = map.get(key);
            if (maxFreq < freq) {
                maxFreq = freq;
                list.clear();
                list.add(key);
                continue;
            }
            if (maxFreq == freq) {
                list.add(key);
            }
        }
        int[] res = new int[list.size()];
        for (int i = 0; i < list.size(); i++) {
            res[i] = list.get(i);
        }
        return res;
    }
    private void searchInBST(TreeNode node) {
        if (node == null) return;
        if (map.containsKey(node.val)) {
            map.put(node.val, map.get(node.val) + 1);
        } else {
            map.put(node.val, 1);
        }
        searchInBST(node.left);
        searchInBST(node.right);
    }
}
