1.Minimum element in BST
code:
class Tree {
    int minValue(Node node) {
        if(node==null){
            return -1;
        }
        while(node.left!=null){
            node=node.left;
        }
        return node.data;
    }
}
2.Lowest Common Ancestor of a Binary Search Tree
code:
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root.val==p.val || root.val==q.val){
            return root;
        }
        if(root.val<p.val && root.val<q.val){
            return lowestCommonAncestor(root.right,p,q);
        }
        else if(root.val>p.val && root.val>q.val){
            return lowestCommonAncestor(root.left,p,q);
        }
        return root;
    }
}
3.Insert into a Binary Search Tree
code:
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        TreeNode cur= new TreeNode(val);
        if(root==null){
            return cur;
        }
        TreeNode res=root;
        TreeNode p=null;
        while(root!=null){
            p=root;
            if(val<root.val){
                root=root.left;
            }
            else{
                root=root.right;
            }
        }
        if(val<p.val){
            p.left=cur;
        }
        else{
            p.right=cur;
        }
        return res;
    }
}

