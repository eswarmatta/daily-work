Same Tree
code:
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p==null && q==null){
            return true;
        }
        if(p==null || q==null){
            return false;
        }
        if(p.val!=q.val){
            return false;
        }
        boolean l=isSameTree(p.left,q.left);
        boolean r=isSameTree(p.right,q.right);
        return l&&r;
    }
}
2.Symmetric Tree
code:
class Solution {
    boolean isSym(TreeNode root1,TreeNode root2){
        if(root1==null && root2==null){
            return true;
        }
        if(root1==null || root2==null){
            return false;
        }
        if(root1.val!=root2.val){
            return false;
        }
        boolean l=isSym(root1.left,root2.right);
        boolean r=isSym(root1.right,root2.left);
        return l&&r;
    }
    public boolean isSymmetric(TreeNode root) {
        TreeNode root1=root.left;
        TreeNode root2=root.right;
        return isSym(root1,root2);
    }
}
3.Path Sum
code:
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root==null){
            return false;
        }
        if(root.left==null && root.right==null && root.val==targetSum){
            return true;
        }
        targetSum=targetSum-root.val;
        boolean l=hasPathSum(root.left,targetSum);
        boolean r=hasPathSum(root.right,targetSum);
        return l||r;
    }
}
4. Invert Binary Tree
code:
class Solution {
    void swap(TreeNode root){
        if(root==null) return;
        swap(root.left);
        swap(root.right);
        TreeNode temp=root.left;
        root.left=root.right;
        root.right=temp;
    }
    public TreeNode invertTree(TreeNode root) {
        swap(root);
        return root;
    }
}
5.Lowest Common Ancestor of a Binary Tree
code:
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null){
            return null;
        }
        if(root==p || root==q){
            return root;
        }
        TreeNode left=lowestCommonAncestor(root.left,p,q);
        TreeNode right=lowestCommonAncestor(root.right,p,q);
        if(left!=null && right!=null){
            return root;
        }
        if(left!=null){
            return left;
        }
        if(right!=null){
            return right;
        }
        return null;
        
    }
}
6.Diameter of Binary Tree
code:
class Solution {
    int height(TreeNode root){
        if(root==null) return 0;
        int l = height(root.left);
        int r= height(root.right);
        return Math.max(l,r)+1;
    }
    int max=0;
    public int diameterOfBinaryTree(TreeNode root) {
        if(root==null) return 0;
        int left=height(root.left);
        int right=height(root.right);
        if(left+right>max){
            max=left+right;
        }
        diameterOfBinaryTree(root.left);
        diameterOfBinaryTree(root.right);
        return max;

    }
}
7.Binary Tree Right Side View
code:
class Solution {
    void rightSide(TreeNode root,List<Integer> list,int a){
        if(root==null){
            return ;
        }
        if(a==list.size()){
            list.add(root.val);
        }
        rightSide(root.right,list,a+1);
        rightSide(root.left,list,a+1);
    }
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        rightSide(root,list,0);
        return list;
    }
}
