1.Recover Binary Search Tree
code:
class Solution {
    TreeNode f=null;
    TreeNode s=null;
    public void recoverTree(TreeNode root) {
        List<TreeNode> list = new ArrayList<>();
        inorder(root,list);
        for(int i=1;i<list.size();i++){
            if((list.get(i).val)<list.get(i-1).val){
                if(f==null){
                    f=list.get(i-1);
                }
                s=list.get(i);
            }
        }
        int temp=f.val;
        f.val=s.val;
        s.val=temp;
        return;
    }
    void inorder(TreeNode root,List<TreeNode> list){
        if(root==null) return;
        inorder(root.left,list);
        list.add(root);
        inorder(root.right,list);
        return;
    }
}
2. Convert Sorted Array to Binary Search Tree
code:
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        return tree(nums,0,nums.length-1);
    }
    TreeNode tree(int[] nums,int l,int h){
        if(l>h || h<l) return null;
        int mid=(l+h)/2;
        TreeNode root= new TreeNode(nums[mid]);
        root.left=tree(nums,l,mid-1);
        root.right=tree(nums,mid+1,h);
        return root;
    }
}
3.Convert Sorted List to Binary Search Tree
code:
class Solution {
    List<Integer> list = new ArrayList<>();
    public TreeNode sortedListToBST(ListNode head) {
        nums(head);
        return tree(list,0,list.size()-1);
    }
    TreeNode tree(List<Integer> list,int l,int h){
        if(l>h||h<l ) return null;
        int mid=(l+h)/2;
        TreeNode root = new TreeNode(list.get(mid));
        root.left=tree(list,l,mid-1);
        root.right=tree(list,mid+1,h);
        return root;
    }
    List<Integer> nums(ListNode head){
        while(head!=null){
            list.add(head.val);
            head=head.next;
        }
        return list;
    }
}
4.Convert BST to Greater Tree
code:
class Solution {
    int sum=0;
    public TreeNode convertBST(TreeNode root) {
        revin(root);
        return root;
    }
    void revin(TreeNode root){
        if(root==null) return;
        revin (root.right);
        root.val=root.val+sum;
        sum=root.val;
        revin(root.left);
        return ;
    }
}
5.Range Sum of BST
code:
class Solution {
    int sum=0;
    public int rangeSumBST(TreeNode root, int low, int high) {
        post(root,low,high);
        return sum;
    }
    void post(TreeNode root,int low,int high){
        if(root==null) return;
        if(root.val<=high && root.val>=low){
            sum+=root.val;
        }
        post(root.left,low,high);
        post(root.right,low,high);
        return;
    }
}
