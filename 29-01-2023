1.Delete Node in BST
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null){
            return root;
        }
        TreeNode p=null;
        TreeNode cur=root;
        while(cur!=null && cur.val!=key){
            p=cur;
            if(key<cur.val){
                cur=cur.left;
            }
            else{
                cur=cur.right;
            }
        }
        if(cur!=null){
            if(cur.left==null && cur.right==null && p!=null){
                if(p.val>cur.val){
                    p.left=null;
                }
                else{
                    p.right=null;
                }
                return root;
            }
        if(cur.left!=null && cur.right!=null){
            TreeNode temp=cur.right;
            p=cur;
            while(temp.left!=null){
                p=temp;
                temp=temp.left;
            }
            cur.val=temp.val;
            cur=temp;
        }
        if(key==root.val){
            if(root.left!=null){
            root=root.left;
            }
            else{
               root=root.right;
            }
        return root;
        }
        if(p.val>cur.val){
            if(cur.left!=null){
                p.left=cur.left;
            }
            else{
                p.left=cur.right;
            }
        }
        else{
            if(cur.left!=null){
                p.right=cur.left;
            }
            else{
                p.right=cur.right;
            }
        }
        }
        return root;
    }
}
2.Validate Binary Search Tree
code:
class Solution {
    public boolean isValidBST(TreeNode root) {
        if(root==null ||(root.left==null && root.right==null)) return true;
        return isbst(root,Long.MIN_VALUE,Long.MAX_VALUE);
    }
    boolean isbst(TreeNode root,long min,long max){
        if(root==null) return true;
        if(root.val<=min || root.val>=max) return false;
        boolean left=isbst(root.left,min,root.val);
        boolean right=isbst(root.right,root.val,max);
        return left && right;
    }
}
