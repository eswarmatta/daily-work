1.Top View Of Binary Tree
code:
class pair{
	BinaryTreeNode node;
	int level;
	public pair(BinaryTreeNode n,int lev){
		node=n;
		level=lev;
	}
}
public class Solution {
	public static ArrayList<Integer> getTopView(BinaryTreeNode root) {
		ArrayList<Integer> list = new ArrayList<>();
		TreeMap<Integer,Integer> tree= new TreeMap<>();
		if(root==null){
			return list ;
		}
		Queue<pair> queue = new LinkedList<>();
		tree.put(0,root.val);
		queue.add(new pair(root,0));
		while(!queue.isEmpty()){
			int size=queue.size();
			for(int i=1;i<=size;i++){
				pair cur= queue.poll();
				BinaryTreeNode nod= cur.node;
				int level=cur.level;
				if(nod.left!=null){
					if(!tree.containsKey(level-1)){
						tree.put(level-1,nod.left.val);
					}
					queue.add(new pair(nod.left,level-1));
				}
				if(nod.right!=null){
					if(!tree.containsKey(level+1)){
						tree.put(level+1,nod.right.val);
					}
					queue.add(new pair(nod.right,level+1));
				}
			}
		}
		for(Integer map:tree.values()){
			list.add(map);
		}
		return list;
	}
}
2.Flatten Binary Tree to Linked List
code:
class Solution {
    TreeNode prev=null;
    public void flatten(TreeNode root) {
        if(root==null){
            return;
        }
        flatten(root.right);
        flatten(root.left);
        root.left=null;
        root.right=prev;
        prev=root;
    }
}
3.Bottom View of Binary Tree
code:
class pair{
    Node node;
    Integer level;
    public pair(Node n,Integer l){
        node=n;
        level=l;
    }
}

class Solution
{
    //Function to return a list containing the bottom view of the given tree.
    public ArrayList <Integer> bottomView(Node root)
    {
        ArrayList<Integer> list = new ArrayList<>();
        TreeMap<Integer,Integer> tree=new TreeMap<>();
        if(root==null){
            return list;
        }
        
        Queue<pair> queue = new LinkedList<>();
        queue.add(new pair(root,0));
        tree.put(0,root.data);
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int i=1;i<=size;i++){
                pair cur=queue.poll();
                Node node=cur.node;
                int level=cur.level;
                if(node.left!=null){
                    tree.put(level-1,node.left.data);
                    queue.add(new pair(node.left,level-1));
                }
                if(node.right!=null){
                    tree.put(level+1,node.right.data);
                    queue.add(new pair(node.right,level+1));
                }
            }
        }
        for(Integer map:tree.values()){
            list.add(map);
        }
        return list;
        
    }
}
