serialize and deserialize in bst
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root==null) return "$";
        String left=serialize(root.left);
        String right=serialize(root.right);
        return root.val+","+left+","+right;
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        Queue<String> q=new LinkedList<String>();
        q.addAll(Arrays.asList(data.split(",")));
        return deserializeHelper(q);
    }
    private TreeNode deserializeHelper(Queue<String> q){
        String curr=q.poll();
        if(curr.equals("$")) return null;
        TreeNode newNode=new TreeNode(Integer.valueOf(curr));
        newNode.left=deserializeHelper(q);
        newNode.right=deserializeHelper(q);
        return newNode;
    }
}

Recover a bst
class Solution{
    TreeNode prev=null,first=null,second=null;
    public static void recoverBST(treeNode root){
      helper(root);
      swap(first.val,second.val);
      }
     void swap(int a,int b){
      int temp=a;
      a=b;
      b=temp;
      }
      private void helper(TreeNode curr){
        if(curr==null)
          return ;
        helper(curr.left);
        if(prev!=null && prev.val>curr.val){
          if(first==null)
            {first=prev;}
          second=curr;
          }
          prev=curr;
          helper(curr.right);
          }
          }

huffman decoding
void decode(String s,Node root){
 StringBuilder sb=new StringBuilder();
 Node c=root;
 for(int i=0;i<s.length();i++){
  c=s.charAt(i)=='1' ? c.right : c.left;
  if(c.right==null && c.left==null){
    sb.append(c.data);
    c=root; 
    }
    }
    System.out.println(sb);
    }
